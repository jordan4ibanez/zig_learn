    //* BEGIN INTERNAL MODULES. ==========================================================

    // I call this style: dumpEverythingIntoAModule5000

    const Searcher = struct {
        fn search(dirString: []const u8, allocator: std.mem.Allocator, moduleMap: *std.hash_map.StringHashMap([]const u8)) void {
            // std.debug.print("hi {s}\n", .{dir});

            var dir = std.fs.cwd().openDir(dirString, .{ .iterate = true }) catch |err| {
                std.log.err("{}", .{err});
                std.process.exit(1);
            };

            var iter = dir.iterate();
            while (iter.next() catch |err| {
                std.log.err("{}", .{err});
                std.process.exit(1);
            }) |file| {
                if (file.kind == .directory) {
                    const newDirString = std.fmt.allocPrint(allocator, "{s}/{s}", .{ dirString, file.name }) catch |err| {
                        std.log.err("{}", .{err});
                        std.process.exit(1);
                    };
                    defer allocator.free(newDirString);

                    // std.debug.print("folder: {s}\n", .{newDirString});
                    search(newDirString, allocator, moduleMap);
                }

                // This could maybe search for an ignore.txt for specific folders or something.

                if (file.kind == .file) {
                    const newDirString = std.fmt.allocPrint(allocator, "{s}/{s}", .{ dirString, file.name }) catch |err| {
                        std.log.err("{}", .{err});
                        std.process.exit(1);
                    };
                    // defer allocator.free(newDirString);

                    // Ignore anything but zig files.
                    if (std.mem.eql(u8, file.name[file.name.len - 4 ..], "zig")) {
                        continue;
                    }

                    // This could have more things added in. :)
                    if (std.mem.eql(u8, file.name, "main.zig") or std.mem.eql(u8, file.name, "root.zig")) {
                        // std.debug.print("nope, {s}\n", .{file.name});
                        continue;
                    }

                    // If you don't want the full path, you can change the module name to:
                    // file.name.len - 4 and memcpy it the same way.

                    const moduleName = allocator.alloc(u8, newDirString.len - 8) catch |err| {
                        std.log.err("{}", .{err});
                        std.process.exit(1);
                    };

                    @memcpy(moduleName, newDirString[4 .. newDirString.len - 4]);

                    moduleMap.put(moduleName, newDirString) catch |err| {
                        std.log.err("{}", .{err});
                        std.process.exit(1);
                    };

                    // std.debug.print("file: {s}\n", .{file.name[file.name.len - 4 ..]});
                    // std.debug.print("module name: {s}\n", .{moduleName});
                    // std.debug.print("file: {s}\n", .{newDirString});
                }

                // try files.append(b.dupe(file.name));
            }
        }
    };

    var moduleMap = std.StringHashMap([]const u8).init(b.allocator);

    Searcher.search("src", b.allocator, &moduleMap);

    var iter = moduleMap.iterator();

    while (iter.next()) |entry| {
        const moduleName = entry.key_ptr.*;
        const modulePath = entry.value_ptr.*;

        // std.debug.print("Module: [{s}] added | [{s}]\n", .{ moduleName, modulePath });

        // const blah: *std.Build.Module = exe.root_module.import_table.get("k") orelse {
        //     std.process.exit(1);
        // };

        const mod = b.createModule(.{
            .root_source_file = b.path(modulePath),
            .target = target,
            .optimize = optimize,
            .imports = &.{},
        });

        // A smol price to pay, you have to duplicate add in modules from the main scope.
        var globalModules = exe.root_module.import_table.iterator();

        while (globalModules.next()) |modEntry| {
            const globalModuleName = modEntry.key_ptr.*;
            // const globalModule = modEntry.value_ptr.*;

            std.debug.print("{s}\n", .{globalModuleName});

            // mod.addImport("mach-glfw", glfw_dep.module("mach-glfw"))
        }

        // mod.addImport("mach-glfw", glfw_dep.module("mach-glfw"));
        // mod.addImport("gl", gl_bindings);
        // mod.addImport("zalgebra", zalgebra_module);

        exe.root_module.addImport(moduleName, mod);
    }

    moduleMap.clearAndFree();